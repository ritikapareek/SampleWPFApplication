<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllContactsViewModel_DisplayName" xml:space="preserve">
    <value>All Contacts</value>
    <comment>The display name of an AllContactsViewModel object</comment>
  </data>
  <data name="ContactsViewModel_ContactsTypeOption_Company" xml:space="preserve">
    <value>Company</value>
    <comment>The option for when a Contacts is a company, not a person.</comment>
  </data>
  <data name="ContactsViewModel_ContactsTypeOption_NotSpecified" xml:space="preserve">
    <value>(Not Specified)</value>
    <comment>The "unselected" option for a Contacts's type.</comment>
  </data>
  <data name="ContactsViewModel_ContactsTypeOption_Person" xml:space="preserve">
    <value>Person</value>
    <comment>The option for when a Contacts is a person, not a company.</comment>
  </data>
  <data name="ContactsViewModel_Error_MissingContactsType" xml:space="preserve">
    <value>Contacts type must be selected</value>
    <comment>The validation error message returned if the ContactsType property has an invalid value.</comment>
  </data>
  <data name="Contacts_Error_CompanyHasNoLastName" xml:space="preserve">
    <value>Companies have no last name</value>
    <comment>Error message for when a Contacts is a company and the user gave it a last name.</comment>
  </data>
  <data name="Contacts_Error_InvalidEmail" xml:space="preserve">
    <value>E-mail address is invalid</value>
    <comment>Error message for when a Contacts has an invalid e-mail address.</comment>
  </data>
  <data name="Contacts_Error_InvalidPhoneNumber" xml:space="preserve">
    <value>Phone number is invalid</value>
    <comment>Error message for when a Contacts has an invalid phone address.</comment>
  </data>
  <data name="Contacts_Error_MissingEmail" xml:space="preserve">
    <value>E-mail address is missing</value>
    <comment>Error message for when a Contacts is missing an e-mail address.</comment>
  </data>
  <data name="Contacts_Error_MissingFirstName" xml:space="preserve">
    <value>First name is missing</value>
    <comment>Error message for when a Contacts is missing a first name.</comment>
  </data>
  <data name="Contacts_Error_MissingLastName" xml:space="preserve">
    <value>Last name is missing</value>
    <comment>Error message for when a Contacts is missing a last name.</comment>
  </data>
  <data name="Contacts_Error_MissingPhoneNumber" xml:space="preserve">
    <value>Phone number is missing</value>
    <comment>Error message for when a Contacts is missing phone number.</comment>
  </data>
  <data name="ContactViewModel_DisplayName" xml:space="preserve">
    <value>New Contacts</value>
    <comment>The display name of a new Contacts object.</comment>
  </data>
  <data name="ContactViewModel_Exception_CannotSave" xml:space="preserve">
    <value>Cannot save an invalid Contacts.</value>
    <comment>The exception message shown if you call Save on an invalid ContactsViewModel object.</comment>
  </data>
  <data name="MainWindowViewModel_Command_CreateNewContacts" xml:space="preserve">
    <value>New Contact</value>
    <comment>Display name for the command that allows the user to create a new Contacts.</comment>
  </data>
  <data name="MainWindowViewModel_Command_SearchAllContacts" xml:space="preserve">
    <value>Search Contacts</value>
    <comment>Searches all the contacts </comment>
  </data>
  <data name="MainWindowViewModel_Command_ViewAllContacts" xml:space="preserve">
    <value>List Contacts</value>
    <comment>Display name for the command that shows all Contacts.</comment>
  </data>
  <data name="MainWindowViewModel_DisplayName" xml:space="preserve">
    <value>My Personal Phone Manager</value>
    <comment>Title of the main window</comment>
  </data>
  <data name="SearchContactsViewModel_DisplayName" xml:space="preserve">
    <value>Search Contacts</value>
    <comment>Used to do searching</comment>
  </data>
  <data name="ContactViewModel_Exception_CannotSearch" xml:space="preserve">
    <value>Cannot search</value>
    <comment>Cannot search</comment>
  </data>
</root>